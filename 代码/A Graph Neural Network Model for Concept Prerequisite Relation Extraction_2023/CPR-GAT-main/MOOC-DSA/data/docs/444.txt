I will now describe De Bruijn graphs. It's De Bruijn invented for solving the universal string problem. Recall that before we were labeling vertices by k-mers and we're looking for Hamiltonian path ends the result in graph. Now, we will label edges by k-mers as shown here. But how would we label vertices of this graph? Well, we will label, given an edge, label by 3-mers, we will label its initial vertex by prefix of the 3-mer and it's final vertex by a suffix of this 3-mer. For example, if you have a 3-mer TAA, initial vertex will be labeled by TA and final vertex will be labeled by AA. As a result, we will have the following labeling 3-mers represent edges and 2-mers represent vertices. And after De Brujin constructed the path, label it in this way, he started to do something strange, even counter-intuitive. So given this path, let's glue together identically label vertices in this pass. For example, there are multiply vertices labeled AT. Let's start gluing them together here, here and we glue them in a single vertex. Our pass has been transformed integral but that's not it. We also have TG, TG repeated vertices vertices glues them together like this. Continue further, where these vertices glue them together. And this is something that is called the De Bruijn graph of the string. The interesting thing is we actually don't need to know the string to construct the De Bruijn graph. You can construct it from its 3-mers only. Indeed, De Bruijn graph of the set of k-mers pattern is constructed in the following way. Vertices of the graph are all unique (k-1)-mers occurring as a prefix or suffix of k-mers in the set patterns. And edges in this graph represents each k-mer in patterns. It corresponds to a directed edge that connects its prefix vertex to its suffix vertex. And the next problem you will have to solve is constructing De Brujin graph from a set of k-mers. Input a set of k-mers pattern output a graph De Brujin of patterns. Remember, this started from a genomic path that spells the genome. And in the top reveals transformation of the genomic parts into the De Bruijn graph. But where is the genome hiding in this graph? Well, it was there in the beginning, we were just gluing some back there. So it must be in the De Bruijn graph somewhere and here it is. So if we fold the edges of the graph, by the way, what are we trying to do when we go through those edges? We are trying to find an Eulerian path that visits each edge exactly once. And in the next segment, you will know why I prefer to solve Eulerian path problem over the Hamiltonian path problem. [MUSIC] 