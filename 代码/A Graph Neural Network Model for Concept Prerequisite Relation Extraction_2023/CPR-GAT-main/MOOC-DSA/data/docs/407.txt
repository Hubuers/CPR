Our next problem is also about paths in graphs. It is called the longest path problem. Here we are given a graph, a weighted graph, and two vertices, s and t, together with a budget b, which is just a number. And our goal is to find a simple path whose total length is at least b. To give a specific example, consider this graph again, and consider the following two vertices. The shortest path, assume also that all the lengths of the shown edges are equal to one. Then the shortest path between the following two vertices uses just one edge, and its length is equal to one. On the other hand, there is a very long simple path here in the graph, it visits all other vertices before going from one vertex to the other one, right? So it turns out that the longest path problem is very difficult. It also looks very similar to the shortest path problem, in which we need to find the shortest path. Or if we stay at its decision version, then we're given a graph and the budget b, and our goal is to find a path whose lengths is at most b. We know that this problem can be solved very efficiently. For example, if all the weights are equal to one, that is the given graph is unweighted, then it can be solved with for search just in linear time. In the longest path problem, we need to find a path of length at least b, and for this problem we know no polynomial time algorithm. 